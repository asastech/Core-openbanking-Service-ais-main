version: '3.9'

services:
  kc-db:
    image: postgres:15-alpine
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data
    tmpfs: /var/lib/postgresql/data
    restart: unless-stopped
  db:
    image: postgres:15-alpine
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
    environment:
      POSTGRES_DB: api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      PGDATA: /var/lib/postgresql/data
    tmpfs: /var/lib/postgresql/data
    ports:
      - 5432:5432
    expose:
      - 5432
    restart: unless-stopped
  db-migrator:
    image: ghcr.io/asastech/db-migrator-main:sha256-357e4ac47c4d7545e81c8c452446a382d03366374273747253fb4b75c8d635df.sig
    command: migrate -i -d api
    environment:
      FLYWAY_URL: jdbc:postgresql://db:5432/api
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: password123
    depends_on:
      - db
    links:
      - db
    restart: always
  keycloak:
    build:
      context: ./keycloak
      args:
        - KC_DATA=default.json
    command: start-dev
    healthcheck:
      test: ['CMD', 'curl', '-skXGET', 'http://localhost:8080/health']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: kc-db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: 'true'
      KC_METRICS_ENABLED: 'true'
      KC_FEATURES_DISABLED: preview,web-authn,docker,openshift-integration
    ports:
      - 8080:8080
    expose:
      - 8080
    links:
      - kc-db
    depends_on:
      - kc-db
  cache:
    image: redis:alpine
    ports:
      - 6379:6379
    expose:
      - 6379
    restart: unless-stopped
  vault:
    build:
      context: ./vault
    command: server -dev -dev-root-token-id $VAULT_TOKEN -dev-listen-address "0.0.0.0:8200"
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-skXGET',
          'http://localhost:8200/v1/sys/health?standbyok=true',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    ports:
      - 8200:8200
    expose:
      - 8200
    environment:
      VAULT_TOKEN: super_secret_vault_token
    cap_add:
      - IPC_LOCK
